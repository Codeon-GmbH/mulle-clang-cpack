#! /usr/bin/env bash

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"


# this script is run on the VM host


VM="precise"
if [ $# -ne 0 ]
then
   VM="$1"
   shift
fi

VERSION="8.0.0.0"
if [ $# -ne 0 ]
then
   VERSION="$1"
   shift
fi



# https://stackoverflow.com/questions/37453525/how-can-i-check-specific-server-running-or-notusing-virsh-commands-before-i-s
is_vm_running()
{
   local vm="$1"

   local tmp

   tmp=$(virsh list --all | grep " ${vm} " | awk '{ print $3}')
   if [ "x$tmp" == "x" ] || [ "x$tmp" != "xrunning" ]
   then
      return 1
   fi
   return 0
}


start()
{
   local vm="$1"
   local user="$2"

   if is_vm_running "${vm}"
   then
      return
   fi

   virsh netstart default 2> /dev/null

   while ! is_vm_running "${vm}"
   do
      sleep 1
      virsh start "${vm}" && break
   done

   while ! ssh "${user}@${vm}" true > /dev/null 2>&1
   do
      sleep 1
   done
}


build()
{
   local vm="$1"
   local user="$2"
   local version="$3"

   local cleanscript

   cleanscript="[ ! -d mulle-clang-lldb ] || rm -rf mulle-clang-lldb"
   ssh -q -t "${user}@${vm}" "${cleanscript}" || exit 1

   local preparescript

   preparescript="\
   [ -d cpack-mulle-clang ] || git clone \"https://www.mulle-kybernetik.com/repositories/cpack-mulle-clang\" &&
   ( cd cpack-mulle-clang && git pull )
   "
   ssh -q -t "${user}@${vm}" "${preparescript}" || exit 1

   local buildscript

   buildscript="VERSION=\"${version}\" ./cpack-mulle-clang/package-build"
   ssh -q -t "${user}@${vm}" "${buildscript}" || exit 1
}


download()
{
   local vm="$1"
   local user="$2"
   local version="$3"

   local dist

   dist="$( ssh "${user}@${vm}" "lsb_release -sc" )" || exit 1

   local filename

   filename="mulle-clang-${version}-${dist}-amd64.deb"
   scp "${user}@${vm}:${filename}" "${filename}"
}


upload()
{
   local vm="$1"
   local user="$2"
   local version="$3"

   local dist

   dist="$( ssh "${user}@${vm}" "lsb_release -sc" )" || exit 1

   local filename

   filename="mulle-clang-${version}-${dist}-amd64.deb"

   scp "${filename}" "oswald:debian-software/dists/${dist}/main/binary-amd64/"
   # ssh oswald "cd debian-software && ./update.sh && ./upload.sh"
}



main()
{
   while [ $# -ne 0 ]
   do
      echo "////// $1 \\\\\\\\\\\\" >&2
      "$1" "${VM}" "${USER}" "${VERSION}"  "$@" || exit 1
      shift
   done
}


if [ $# -eq 0 ]
then
   main start build download upload
else
   main "$@"
fi
