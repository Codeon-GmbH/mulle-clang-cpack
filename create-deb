#! /usr/bin/env bash

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

SSHFLAGS="${SSHFLAGS:--q -t}"

# this script is run on the VM host


VM="buster"
if [ $# -ne 0 ]
then
   VM="$1"
   shift
fi

VERSION="${VERSION:-14.0.6.0}"

case "$RC" in
   RC*)
      RC="-$RC"
   ;;

   [0-9]*)
      RC="-RC$RC"
   ;;

   *)
      RC=
   ;;
esac


# https://stackoverflow.com/questions/37453525/how-can-i-check-specific-server-running-or-notusing-virsh-commands-before-i-s
is_vm_running()
{
   local vm="$1"

   local tmp

   tmp=$(virsh list --all | grep " ${vm} " | awk '{ print $3}')
   if [ "x$tmp" == "x" ] || [ "x$tmp" != "xrunning" ]
   then
      return 1
   fi
   return 0
}


start()
{
   local vm="$1"
   local user="$2"

   if is_vm_running "${vm}"
   then
      return
   fi

   virsh net-start default 2> /dev/null

   while ! is_vm_running "${vm}"
   do
      sleep 1
      virsh start "${vm}" && break
   done

   while ! ssh "${user}@${vm}" true > /dev/null 2>&1
   do
      sleep 1
   done
}


prepare()
{
   local vm="$1"
   local user="$2"
   local version="$3"
   local rc="$4"

   local preparescript

   preparescript="\
   ( [ -d mulle-clang-cpack ] || git clone 'https://github.com/mulle-objc/mulle-clang-cpack.git' ) &&
   ( cd mulle-clang-cpack && git pull ) &&
   ( cd mulle-clang-cpack && git checkout mulle/${version%\.*} )
   "

   ssh ${SSHFLAGS} "${user}@${vm}" "${preparescript}" || exit 1

   local buildscript

   buildscript="VERSION=\"${version}\" RC=\"${rc}\" ./mulle-clang-cpack/package-build clean download"

   ssh ${SSHFLAGS} "${user}@${vm}" "${buildscript}" || exit 1
}


build()
{
   local vm="$1"
   local user="$2"
   local version="$3"
   local rc="$4"

   local buildscript

   buildscript="MAKETOOL=\"${MAKETOOL}\" \
VERSION=\"${version}\" \
RC="${rc}" \
./mulle-clang-cpack/package-build build"
   ssh ${SSHFLAGS} "${user}@${vm}" "${buildscript}" || exit 1
}


verpack()
{
   local vm="$1"
   local user="$2"
   local version="$3"
   local rc="$4"

   local buildscript

   buildscript="MAKETOOL=\"${MAKETOOL}\" \
VERSION=\"${version}\" \
RC="${rc}" \
./mulle-clang-cpack/package-build verpack"
   ssh ${SSHFLAGS} "${user}@${vm}" "${buildscript}"  || exit 1
}


download()
{
   local vm="$1"
   local user="$2"
   local version="$3"
   local rc="$4"

   local dist

   dist="$( ssh ${SSHFLAGS} "${user}@${vm}" "lsb_release -sc" )" || exit 1
   # not sure who gives me a \r here
   dist="`tr -d '\015' <<< "${dist}" `"

   local filename
   local debname

   debname="main"
   case "${version}" in
      *-*)
         debname="${version#*-}"
         version="${version%-*}"
      ;;
   esac

   local srcfilename

   srcfilename="mulle-clang-${version}${rc}-${dist}-amd64.deb"
   filename="mulle-clang-${version}${rc}-${dist}-amd64.deb"
   scp "${user}@${vm}:${srcfilename}" "${filename}"
}


upload()
{
   local vm="$1"
   local user="$2"
   local version="$3"
   local rc="$4"

   local dist

   dist="$( ssh ${SSHFLAGS} "${user}@${vm}" "lsb_release -sc" )" || exit 1
   # not sure who gives me a \r here
   dist="`tr -d '\015' <<< "${dist}" `"

   local filename
   local debname

   debname="main"
   case "${version}" in
      *-*)
         debname="${version#*-}"
         version="${version%-*}"
      ;;
   esac

   filename="mulle-clang-${version}${rc}-${dist}-amd64.deb"

   ssh ${SSHFLAGS} "oswald" mkdir -p "debian-software/dists/${dist}/${debname}/binary-amd64" || exit 1

   scp "${filename}" "oswald:debian-software/dists/${dist}/${debname}/binary-amd64/"
   # ssh oswald "cd debian-software && ./update.sh && ./upload.sh"
}



main()
{
   while [ $# -ne 0 ]
   do
      echo "////// $1 \\\\\\\\\\\\" >&2
      "$1" "${VM}" "${USER}" "${VERSION}" "${RC}" || exit 1
      shift
   done
}


if [ $# -eq 0 ]
then
   main start prepare build verpack download upload
else
   main "$@"
fi
