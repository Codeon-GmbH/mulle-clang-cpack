#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

# this script is run in the VM

VERSION="${VERSION:-8.0.0.0}"
DIST="`lsb_release -sc`"


clean()
{
   if [ -d mulle-clang-lldb ]
   then
      rm -rf mulle-clang-lldb
   fi
   mkdir mulle-clang-lldb
}



download()
{
   (
      cd mulle-clang-lldb &&
      curl -L -O "https://raw.githubusercontent.com/Codeon-GmbH/mulle-clang/${VERSION}/bin/install-mulle-clang" &&
      chmod 755 install-mulle-clang
   )
}


# just here for documentation
# https://askubuntu.com/questions/618474/how-to-install-the-latest-gcurrently-5-1-in-ubuntucurrently-14-04
install_gcc6_on_trusty()
{
   sudo add-apt-repository ppa:ubuntu-toolchain-r/test
   sudo apt-get update
   sudo apt-get install gcc-6 g++-6
   sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 100
   sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 100
   sudo update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-6 100
}


build()
{
   (
      cd mulle-clang-lldb &&
      mkdir -p opt/mulle-clang/${VERSION} &&
      case "${DIST}" in
         precise)
            CC=clang-3.6 CXX=clang++-3.6 ./install-mulle-clang --prefix "`pwd`/opt/mulle-clang/${VERSION}" --with-lldb
         ;;

	      # trusty needs  g++-6
         *)
            ./install-mulle-clang --prefix "`pwd`/opt/mulle-clang/${VERSION}" --with-lldb
         ;;
      esac
   )
}


verpack()
{
   cp cpack-mulle-clang/* mulle-clang-lldb/ &&

   (
      cd mulle-clang-lldb &&
      rm -rf build && # make room for packaging
      chmod 755 generate-package &&
      VERSION="${VERSION}" ./generate-package &&
      mv package/mulle-clang-${VERSION}-Linux.deb ../mulle-clang-${VERSION}-${DIST}-amd64.deb &&

      echo "Debian Package \"mulle-clang-${VERSION}-${DIST}-amd64.deb\" ready" >&2
   )
}


main()
{
   while [ $# -ne 0 ]
   do
      echo "====== $1 ======" >&2
      "$1" || exit 1
      shift
   done
}


if [ $# -eq 0 ]
then
   main clean download build verpack
else
   main "$@"
fi

